@model FlightReservation.Models.ticket 

@section scripts
{
<script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
<script src="~/Scripts/jquery.seat-charts.js"></script>
}

@{
    ViewBag.Title = "Create";
}
<link rel="stylesheet" type="text/css" href="~/Content/jquery.seat-charts.css">

<h2>Create</h2>

<html>
<body>
		<div class="wrapper">
			<div class="container">
				<div id="seat-map">
					<div class="front-indicator">Front</div>
					
				</div>
				<div class="booking-details">
					<h2>Booking Details</h2>
					
					<h3> Selected Seats (<span id="counter">0</span>):</h3>
					<ul id="selected-seats"></ul>
					
					Total: <b>$<span id="total">0</span></b>
					
					<button class="checkout-button">Checkout &raquo;</button>
					
					<div id="legend"></div>
				</div>
			</div>
		</div>
		
		<script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
		<script src="~/Scripts/jquery.seat-charts.js"></script>
		
		<script>
			var firstSeatLabel = 1;
			var counterS = 0;
		
			$(document).ready(function() {
				var $cart = $('#selected-seats'),
					$counter = $('#counter'),
					$total = $('#total'),
					sc = $('#seat-map').seatCharts({
					map: [
						'ffff',
						'ff_ff',
						'ee_ee',
						'ee_ee',
						'ee___',
						'ee_ee',
						'ee_ee',
						'ee_ee',
						'eeeee',
					],
					seats: {
						f: {
							price   : 100,
							classes : 'first-class', //your custom CSS class
							category: 'First Class'
						},
						e: {
							price   : 40,
							classes : 'economy-class', //your custom CSS class
							category: 'Economy Class'
						}					
					
					},
					naming : {
						top : false,
						getLabel : function (character, row, column) {
							return firstSeatLabel++;
						},
					},
					legend : {
						node : $('#legend'),
					    items : [
							[ 'f', 'available',   'First Class' ],
							[ 'e', 'available',   'Economy Class'],
							[ 'f', 'unavailable', 'Already Booked']
					    ]					
					},
					click: function () {
						if (this.status() == 'available' && counterS < 1) {
							counterS += 1;
							//let's create a new <li> which we'll add to the cart items
							$('<li>'+this.data().category+' Seat # '+this.settings.label+': <b>$'+this.data().price+'</b> <a href="#" class="cancel-cart-item">[cancel]</a></li>')
								.attr('id', 'cart-item-'+this.settings.id)
								.data('seatId', this.settings.id)
								.appendTo($cart);
							
							/*
							 * Lets update the counter and total
							 *
							 * .find function will not find the current seat, because it will change its stauts only after return
							 * 'selected'. This is why we have to add 1 to the length and the current seat price to the total.
							 */
							$counter.text(sc.find('selected').length+1);
							$total.text(recalculateTotal(sc)+this.data().price);
							
							return 'selected';
						} else if (this.status() == 'selected') {
							counterS -= 1;
							//update the counter
							$counter.text(sc.find('selected').length-1);
							//and total
							$total.text(recalculateTotal(sc)-this.data().price);
						
							//remove the item from our cart
							$('#cart-item-'+this.settings.id).remove();
						
							//seat has been vacated
							return 'available';
						} else if (this.status() == 'unavailable') {
							//seat has been already booked
							return 'unavailable';
						} else {
							return this.style();
						}
					}
				});

				//this will handle "[cancel]" link clicks
				$('#selected-seats').on('click', '.cancel-cart-item', function () {
					//let's just trigger Click event on the appropriate seat, so we don't have to repeat the logic here
					sc.get($(this).parents('li:first').data('seatId')).click();
				});

				//let's pretend some seats have already been booked
				sc.get(['1_4', '4_1', '7_1', '7_2']).status('unavailable');
		
		});

		function recalculateTotal(sc) {
			var total = 0;
		
			//basically find every selected seat and sum its price
			sc.find('selected').each(function () {
				total += this.data().price;
			});
			
			return total;
		}
		
		</script>
	</body>
</html>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ticket</h4>
        <hr />
        @Html.ValidationSummary(true)

        @*<div class="form-group">
                @Html.LabelFor(model => model.Tid, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Tid)
                    @Html.ValidationMessageFor(model => model.Tid)
                </div>
            </div>
                    <div class="form-group">
                    @Html.LabelFor(model => model.FinalPrice, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FinalPrice)
                        @Html.ValidationMessageFor(model => model.FinalPrice)
                    </div>
                </div>
                           <div class="form-group">
                    @Html.LabelFor(model => model.Status, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Status)
                        @Html.ValidationMessageFor(model => model.Status)
                    </div>
                </div>
        *@


        <div class="form-group">
            @Html.LabelFor(model => model.SeatNum, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SeatNum)
                @Html.ValidationMessageFor(model => model.SeatNum)
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Seat Class", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SeatClass, new List<SelectListItem>
           {
               new SelectListItem{Text = "Economy Class", Value = "1", Selected=true},
               new SelectListItem{Text = "Premium Economy Class", Value ="2" },
               new SelectListItem{Text = "Business Class", Value ="3"},
               new SelectListItem{Text = "First Class", Value ="4"},
           })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Number of Bags", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Num_of_bags, new List<SelectListItem>
           {
               new SelectListItem{Text = "1", Value = "1", Selected=true},
               new SelectListItem{Text = "2", Value ="2" },
               new SelectListItem{Text = "3", Value ="3"},
               new SelectListItem{Text = "4", Value ="4"},
               new SelectListItem{Text = "5", Value ="5"}
           })

            </div>
        </div>

        <div class="form-group">
        @Html.Label("Total", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
           @{
        
           }
            
        </div>
    </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Submit" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to Search", "SearchFlight")
</div>
